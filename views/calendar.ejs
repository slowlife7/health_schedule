<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      * {
        margin: 0;
        padding: 0;
      }
      body {
        font-family: "굴림", gulim, helvetica, "나눔바른고딕 옛한글",
          "NanumBarunGothic YetHangul", "새굴림", sans-serif;
        color: #000;
      }

      li {
        list-style: none;
      }
      a {
        text-decoration: none;
      }

      .pagination {
        font-size: 0.7em;
        text-align: center;
        margin-top: 5%;
        padding-bottom: 5%;
      }
      .pagination ul {
        display: inline-block;
        padding-left: 0;
        text-align: center;
      }
      .pagination ul li {
        display: inline;
        text-align: center;
      }
      .pagination ul li a {
        font-size: 1.2em;
        padding: 5px 12px;
        color: dimgray;
      }
      .pagination ul li a:hover {
        color: honeydew;
      }
    </style>
    <link rel="stylesheet" href="/css/excercise.css" />
    <link rel="stylesheet" href="/css/calendar.css" />
    <link rel="stylesheet" href="/css/modal.css" />
    <link rel="stylesheet" href="/css/imgmenu.css" />
  </head>
  <body>
    <div class="calendar">
      <div class="calendar--nav">
        <div class="calendar--month">
          <div class="calendar--month__title"><%= title %></div>
        </div>
      </div>

      <div class="calendar--content">
        <div class="calendar--week">
          <div class="calendar--week__title">
            <div class="calendar--week__text">일</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">월</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">화</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">수</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">목</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">금</div>
          </div>
          <div class="calendar--week__title">
            <div class="calendar--week__text">토</div>
          </div>
        </div>

        <% for( let i = 0; i < days.length / 7; i++) { %>
        <div class="calendar--week">
          <% for ( let j = i * 7; j < (i +1) * 7; j++) { %>
          <div class="calendar--day">
            <div class="calendar--day__text"><%= days[j] %></div>
          </div>
          <% } %>
        </div>
        <% } %>
      </div>
    </div>

    <% include excercise %>
    <% include record %>
    <% include setting %>
    <% include menu-modal %>
  </body>

  <script src="/javascript/excercise.js"></script>
  <script>
    let navURL = "";
    function httpGetRequest(url, responseType, method, data) {
      return new Promise((resolve, reject) => {
        try {
          const xhr = new XMLHttpRequest();
          const mth = method || "GET";
          console.log("mth:", mth);
          xhr.open(mth, url);
          method === "POST" &&
            xhr.setRequestHeader("Content-Type", "application/json");
          console.log(url.split("?")[0]);
          xhr.responseType = responseType || "json";
          xhr.onerror = event => {
            reject(`Network error: ${event}`);
          };
          xhr.onload = () => {
            if (xhr.status === 200) {
              resolve({
                ...xhr.response,
                url: url.split("?")[0],
                query: navURL
              });
            } else {
              reject(`XHR load error: ${xhr.statusText}`);
            }
          };
          console.log(data);
          xhr.send(data);
        } catch (err) {
          reject(err.message);
        }
      });
    }

    const wrapContent = document.querySelector("tbody");
    const setPostContent = function(json) {
      return (
        '<tr> \
      <td><input type="checkbox"/></td> \
      <td>' +
        json.name +
        "</td> 		\
      <td>" +
        json.weight +
        "</td>		\
      <td><select><option>" +
        json.set +
        "</option></select></td>	\
      </tr>"
      );
    };

    const paintPosts = function(json) {
      console.log("paint posts");
      wrapContent.innerHTML = "";
      json.items.forEach(item => {
        wrapContent.insertAdjacentHTML("beforeend", createRow(item));
      });
    };

    const getPage = function(url) {
      console.log("url:", url);

      httpGetRequest(url)
        .then(result => {
          paintPosts(result);
          paintPagination(result);
          console.log(result.items);
        })
        .catch(err => {});
    };
    const getPageBox = function(url, arrow) {
      return (
        '<li> \
                <a href="javascript:void(0);" onclick=getPage("' +
        url +
        '");>' +
        arrow +
        "</a>\
              </li>"
      );
    };
    const paginationContent = document.querySelector(".pagination");
    const paintPagination = function(json) {
      console.dir(json);
      paginationContent.innerHTML = "";

      const ul = document.createElement("ul");
      paginationContent.appendChild(ul);

      json.prev &&
        ul.insertAdjacentHTML(
          "beforeend",
          getPageBox(json.url + "?pageNo=" + json.prev + "&" + json.query, "<<")
        );

      for (let i = json.first; i <= json.last; i++) {
        ul.insertAdjacentHTML(
          "beforeend",
          getPageBox(json.url + "?pageNo=" + i + "&" + json.query, i)
        );
      }

      json.next &&
        ul.insertAdjacentHTML(
          "beforeend",
          getPageBox(json.url + "?pageNo=" + json.next + "&" + json.query, ">>")
        );
    };

    document
      .querySelector(".calendar--content")
      .addEventListener("click", event => {
        console.log(event.target.innerText);
        document.querySelector(".menu--modal .modal").style.display = "block";

        httpGetRequest("/excercises")
          .then(result => {
            paintPosts(result);
            paintPagination(result);
            console.log(result.items);
          })
          .catch(err => {});
      });

    document
      .querySelector(".menu--modal .modal--header > img")
      .addEventListener("click", function() {
        console.log('modal1');
        document.querySelector(".menu--modal .modal").style.display = "none";
      });

    document
      .querySelector(".setting--modal .modal--header > img")
      .addEventListener("click", function() {
        document.querySelector(".setting--modal .modal").style.display = "none";
      });

      document
      .querySelector(".excercise--modal .modal--header > img")
      .addEventListener("click", function() {
        document.querySelector(".excercise--modal .modal").style.display = "none";
      });

      document
      .querySelector(".record--modal .modal--header > img")
      .addEventListener("click", function() {
        document.querySelector(".record--modal .modal").style.display = "none";
      });

    document
      .querySelector(".menu--modal .modal--content")
      .addEventListener("click", function(event) {
        console.dir(event.target);

        const selected = event.target.classList[0];
        if(selected === 'setting') {
          document.querySelector(".menu--modal .modal").style.display = "none";
          document.querySelector(".setting--modal .modal").style.display =
            "block";
        } else if(selected === 'excercise') {
          document.querySelector(".menu--modal .modal").style.display = "none";
          document.querySelector(".excercise--modal .modal").style.display =
            "block";
        } else if(selected === 'record') {
          document.querySelector(".menu--modal .modal").style.display = "none";
          document.querySelector(".record--modal .modal").style.display =
            "block";
        }

      });
  </script>
</html>
